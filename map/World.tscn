[gd_scene load_steps=15 format=2]

[ext_resource path="res://map/World.gd" type="Script" id=1]
[ext_resource path="res://assets/sand.png" type="Texture" id=2]
[ext_resource path="res://assets/grass.png" type="Texture" id=3]
[ext_resource path="res://assets/wall.png" type="Texture" id=4]
[ext_resource path="res://assets/lava.png" type="Texture" id=5]
[ext_resource path="res://assets/water.png" type="Texture" id=6]
[ext_resource path="res://assets/dirt.png" type="Texture" id=7]
[ext_resource path="res://assets/stone.png" type="Texture" id=8]

[sub_resource type="ConvexPolygonShape2D" id=1]
points = PoolVector2Array( 64, 64, 0, 64, 0, 0, 64, 0 )

[sub_resource type="Shader" id=10]
code = "shader_type canvas_item;
uniform mat4 global_transform;
varying vec2 uv;

void vertex(){
    uv = (global_transform * vec4(VERTEX, 0.0, 1.0)).xy * 0.003;
}

vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float noise(vec2 v){
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

// convert -1.0 - 1.0 to 0.0 - 1.0
float normf(float v){
    return (v + 1.0) * 0.5;
}

float sharpen(float v, float sharpness){
    return round(v * sharpness) / sharpness;
}

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

const float scale = 5.0;
const float offset = 9999.0;
const float sharpness = 30.0;
const float detailedness = 0.1;
const float interference_speed = 0.08;
const float gradient_speed = 2.5;
const float light_speed = 2.0;
const float light_brightness = 0.4;
const float light_thickness = 0.05;

void fragment(){
    // use simplex noise to create lightmap
    float light_noise = normf(noise(uv * scale)); 
    // calculate the current maximum brightness and subtract this with the noise above
    // (use trigonometric function based on the time and the current X position)
    float light_upper = normf(sin(TIME * light_speed + uv.x * scale));
    // obtain light color
    vec3 light = vec3(1.0 - max(0.0, abs(light_upper - light_noise) - light_thickness));

    // noise-in-noise help to animate \"interference\" without moving the texture
    float itf = noise(uv * detailedness);
    itf = noise(uv * itf + TIME * interference_speed);
    // primary color
    float k = normf(noise((uv + offset + itf) * scale));
    k = clamp(sharpen(k, sharpness), 0.0, 1.0); // add sharpness effect
    vec3 primary = vec3(40.0, k*(150.0 - 50.0) + 100.0, 222.0) / 255.0;
    // grayscaled gradient color
    float g = normf(k + cos(noise(uv - offset) + TIME * gradient_speed));
    vec3 grayscale = vec3(g * k);

    // mix colors and light
    vec3 color = mix(primary, grayscale, 0.3);
    COLOR = vec4(color + light * light_brightness, 1.0);
    COLOR.r = sharpen(COLOR.r, 5.0);
    COLOR.g = sharpen(COLOR.g, 5.0);
    COLOR.b = sharpen(COLOR.b, 5.0);
}
"

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )
shader_param/global_transform = null

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;
uniform mat4 global_transform;
varying vec2 uv;

void vertex(){
    uv = (global_transform * vec4(VERTEX, 0.0, 1.0)).xy * 0.003;
}

vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float noise(vec2 v){
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

// convert -1.0 - 1.0 to 0.0 - 1.0
float normf(float v){
    return (v + 1.0) * 0.5;
}

float sharpen(float v, float sharpness){
    return round(v * sharpness) / sharpness;
}

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

const float scale = 5.0;
const float offset = 9999.0;
const float sharpness = 30.0;
const float detailedness = 0.1;
const float interference_speed = 0.05;
const float gradient_speed = 2.0;
const float light_speed = 2.0;
const float light_brightness = 0.4;
const float light_thickness = 0.05;

void fragment(){
    // use simplex noise to create lightmap
    float light_noise = normf(noise(uv * scale)); 
    // calculate the current maximum brightness and subtract this with the noise above
    // (use trigonometric function based on the time and the current X position)
    float light_upper = normf(sin(TIME * light_speed + uv.x * scale));
    // obtain light color
    vec3 light = vec3(1.0 - max(0.0, abs(light_upper - light_noise) - light_thickness));

    // noise-in-noise help to animate \"interference\" without moving the texture
    float itf = noise(uv * detailedness);
    itf = noise(uv * itf + TIME * interference_speed);
    // primary color
    float k = normf(noise((uv + offset + itf) * scale));
    k = clamp(sharpen(k, sharpness), 0.0, 1.0); // add sharpness effect
    vec3 primary = vec3(1.0, k, 0.0);
    // grayscaled gradient color
    float g = normf(k + cos(noise(uv - offset) + TIME * gradient_speed));
    vec3 grayscale = vec3(g * k);

    // mix colors and light
    vec3 color = mix(primary, grayscale, 0.3);
    COLOR = vec4(color + light * light_brightness, 1.0);
    COLOR.r = sharpen(COLOR.r, 5.0);
    COLOR.g = sharpen(COLOR.g, 5.0);
    COLOR.b = sharpen(COLOR.b, 5.0);
}
"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 9 )
shader_param/global_transform = null

[sub_resource type="TileSet" id=2]
0/name = "grass.png 0"
0/texture = ExtResource( 3 )
0/tex_offset = Vector2( 0, 0 )
0/modulate = Color( 1, 1, 1, 1 )
0/region = Rect2( 0, 0, 64, 64 )
0/tile_mode = 0
0/occluder_offset = Vector2( 0, 0 )
0/navigation_offset = Vector2( 0, 0 )
0/shape_offset = Vector2( 0, 0 )
0/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
0/shape_one_way = false
0/shape_one_way_margin = 0.0
0/shapes = [  ]
0/z_index = 0
1/name = "sand.png 1"
1/texture = ExtResource( 2 )
1/tex_offset = Vector2( 0, 0 )
1/modulate = Color( 1, 1, 1, 1 )
1/region = Rect2( 0, 0, 64, 64 )
1/tile_mode = 0
1/occluder_offset = Vector2( 0, 0 )
1/navigation_offset = Vector2( 0, 0 )
1/shape_offset = Vector2( 0, 0 )
1/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
1/shape_one_way = false
1/shape_one_way_margin = 0.0
1/shapes = [  ]
1/z_index = 0
2/name = "stone.png 2"
2/texture = ExtResource( 8 )
2/tex_offset = Vector2( 0, 0 )
2/modulate = Color( 1, 1, 1, 1 )
2/region = Rect2( 0, 0, 64, 64 )
2/tile_mode = 0
2/occluder_offset = Vector2( 0, 0 )
2/navigation_offset = Vector2( 0, 0 )
2/shape_offset = Vector2( 0, 0 )
2/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
2/shape_one_way = false
2/shape_one_way_margin = 0.0
2/shapes = [  ]
2/z_index = 0
3/name = "dirt.png 3"
3/texture = ExtResource( 7 )
3/tex_offset = Vector2( 0, 0 )
3/modulate = Color( 1, 1, 1, 1 )
3/region = Rect2( 0, 0, 64, 64 )
3/tile_mode = 0
3/occluder_offset = Vector2( 0, 0 )
3/navigation_offset = Vector2( 0, 0 )
3/shape_offset = Vector2( 0, 0 )
3/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
3/shape_one_way = false
3/shape_one_way_margin = 0.0
3/shapes = [  ]
3/z_index = 0
4/name = "wall.png 4"
4/texture = ExtResource( 4 )
4/tex_offset = Vector2( 0, 0 )
4/modulate = Color( 1, 1, 1, 1 )
4/region = Rect2( 0, 0, 64, 64 )
4/tile_mode = 0
4/occluder_offset = Vector2( 0, 0 )
4/navigation_offset = Vector2( 0, 0 )
4/shape_offset = Vector2( 0, 0 )
4/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
4/shape = SubResource( 1 )
4/shape_one_way = false
4/shape_one_way_margin = 1.0
4/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 1 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
4/z_index = 0
5/name = "water.png 5"
5/texture = ExtResource( 6 )
5/tex_offset = Vector2( 0, 0 )
5/material = SubResource( 11 )
5/modulate = Color( 1, 1, 1, 1 )
5/region = Rect2( 0, 0, 64, 64 )
5/tile_mode = 0
5/occluder_offset = Vector2( 0, 0 )
5/navigation_offset = Vector2( 0, 0 )
5/shape_offset = Vector2( 0, 0 )
5/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
5/shape_one_way = false
5/shape_one_way_margin = 0.0
5/shapes = [  ]
5/z_index = 0
6/name = "lava.png 6"
6/texture = ExtResource( 5 )
6/tex_offset = Vector2( 0, 0 )
6/material = SubResource( 8 )
6/modulate = Color( 1, 1, 1, 1 )
6/region = Rect2( 0, 0, 64, 64 )
6/tile_mode = 0
6/occluder_offset = Vector2( 0, 0 )
6/navigation_offset = Vector2( 0, 0 )
6/shape_offset = Vector2( 0, 0 )
6/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
6/shape_one_way = false
6/shape_one_way_margin = 0.0
6/shapes = [  ]
6/z_index = 0

[node name="World" type="TileMap"]
position = Vector2( 0, 38 )
tile_set = SubResource( 2 )
format = 1
script = ExtResource( 1 )

[node name="ChunkCleaner" type="Timer" parent="."]
wait_time = 3.0
autostart = true

[connection signal="timeout" from="ChunkCleaner" to="." method="_on_ChunkCleaner_timeout"]
